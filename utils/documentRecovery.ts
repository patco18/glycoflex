import { doc, getDoc, setDoc, query, collection, where, getDocs } from 'firebase/firestore';
import { db, auth } from '@/config/firebase';
import { EncryptionService } from './secureCloudStorage';
import { showToast } from '@/hooks/useToast';

/**
 * Utilitaire avanc√© pour corriger ou r√©cup√©rer des documents corrompus
 */
export class DocumentRecoveryTools {
  /**
   * Tente de r√©parer un document sp√©cifique avec une cl√© alternative
   */
  static async attemptDocumentRepair(documentId: string, alternativeKey?: string): Promise<boolean> {
    try {
      // V√©rifier l'authentification
      if (!auth.currentUser) {
        throw new Error("L'utilisateur doit √™tre connect√©");
      }
      
      console.log(`üîß Tentative de r√©paration du document: ${documentId}`);
      
      // R√©cup√©rer le document
      const docRef = doc(db, 'encrypted_measurements', documentId);
      const docSnap = await getDoc(docRef);
      
      if (!docSnap.exists()) {
        console.warn(`‚ö†Ô∏è Document inexistant: ${documentId}`);
        return false;
      }
      
      const data = docSnap.data();
      
      // V√©rifier le propri√©taire
      if (data.userId !== auth.currentUser.uid) {
        console.warn(`‚ö†Ô∏è Document appartenant √† un autre utilisateur: ${data.userId}`);
        return false;
      }
      
      // V√©rifier si le document est d√©j√† marqu√© comme corrompu
      if (data.isCorrupted === true || !data.encryptedData || data.encryptedData === 'CORRUPTED_DATA_FLAGGED') {
        console.warn(`‚ö†Ô∏è Document d√©j√† marqu√© comme corrompu: ${documentId}`);
        return false;
      }
      
      // Si une cl√© alternative est fournie, l'ajouter temporairement aux cl√©s legacy
      let usedAltKey = false;
      if (alternativeKey) {
        await EncryptionService.addLegacyKeyCandidate(alternativeKey);
        console.log('üîë Cl√© alternative ajout√©e temporairement');
      }
      
      // Tenter le d√©chiffrement
      try {
        const encryptedData = data.encryptedData;
        const tryAny = EncryptionService.tryDecryptWithAnyKey(encryptedData);
        
        if (tryAny.data && typeof tryAny.data === 'object') {
          // R√©chiffrement avec la cl√© principale
          if (tryAny.usedLegacy) {
            usedAltKey = true;
            const reencrypted = EncryptionService.encrypt(tryAny.data);
            
            // Mettre √† jour le document avec les donn√©es r√©chiffr√©es
            await setDoc(docRef, {
              userId: data.userId,
              measurementId: data.measurementId,
              encryptedData: reencrypted,
              timestamp: tryAny.data.timestamp || data.timestamp,
              lastModified: Date.now(),
              isCorrupted: false // Marquer explicitement comme non corrompu
            });
            
            console.log(`‚úÖ Document r√©par√© avec succ√®s (r√©chiffr√©): ${documentId}`);
            return true;
          } else {
            console.log(`‚úÖ Document d√©j√† utilisable avec la cl√© actuelle: ${documentId}`);
            return true;
          }
        }
      } catch (error) {
        console.error(`‚ùå √âchec du d√©chiffrement lors de la r√©paration: ${documentId}`, error);
      }
      
      return false;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la tentative de r√©paration: ${documentId}`, error);
      return false;
    }
  }
  
  /**
   * Analyse tous les documents marqu√©s comme corrompus et tente de les r√©parer avec une cl√© alternative
   */
  static async scanAndRepairCorruptedDocuments(alternativeKey?: string): Promise<{
    found: number;
    fixed: number;
    failed: number;
  }> {
    try {
      if (!auth.currentUser) {
        throw new Error("L'utilisateur doit √™tre connect√©");
      }
      
      const userId = auth.currentUser.uid;
      console.log(`üîç Recherche des documents corrompus pour l'utilisateur ${userId}`);
      
      // Requ√™te pour trouver les documents corrompus
      const q = query(
        collection(db, 'encrypted_measurements'),
        where('userId', '==', userId),
        where('isCorrupted', '==', true)
      );
      
      const querySnapshot = await getDocs(q);
      const corruptedDocs = querySnapshot.docs;
      
      console.log(`üîç ${corruptedDocs.length} documents corrompus trouv√©s`);
      
      let fixedCount = 0;
      let failedCount = 0;
      
      // Pour chaque document, tenter la r√©paration
      for (const doc of corruptedDocs) {
        const success = await this.attemptDocumentRepair(doc.id, alternativeKey);
        if (success) {
          fixedCount++;
        } else {
          failedCount++;
        }
      }
      
      const result = {
        found: corruptedDocs.length,
        fixed: fixedCount,
        failed: failedCount
      };
      
      console.log(`üìä R√©sultat de la r√©paration: ${JSON.stringify(result)}`);
      return result;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'analyse et r√©paration:', error);
      return { found: 0, fixed: 0, failed: 0 };
    }
  }
  
  /**
   * Tente de modifier la cl√© d'un document sp√©cifique pour lui attribuer un userId valide
   * Utile pour les documents dont l'userId ne correspond pas
   */
  static async fixDocumentOwnership(documentId: string): Promise<boolean> {
    try {
      if (!auth.currentUser) return false;
      
      // Analyser l'ID pour extraire l'ID de mesure (partie apr√®s le _)
      const parts = documentId.split('_');
      if (parts.length !== 2) {
        console.warn(`‚ö†Ô∏è Format d'ID invalide: ${documentId}`);
        return false;
      }
      
      const measurementId = parts[1];
      const userId = auth.currentUser.uid;
      const newDocId = `${userId}_${measurementId}`;
      
      // V√©rifier si un document avec le nouvel ID existe d√©j√†
      const newDocRef = doc(db, 'encrypted_measurements', newDocId);
      const newDocSnap = await getDoc(newDocRef);
      
      if (newDocSnap.exists()) {
        console.warn(`‚ö†Ô∏è Un document existe d√©j√† avec l'ID: ${newDocId}`);
        return false;
      }
      
      // R√©cup√©rer le document original
      const originalDocRef = doc(db, 'encrypted_measurements', documentId);
      const originalDocSnap = await getDoc(originalDocRef);
      
      if (!originalDocSnap.exists()) {
        console.warn(`‚ö†Ô∏è Document source inexistant: ${documentId}`);
        return false;
      }
      
      const data = originalDocSnap.data();
      
      // Cr√©er un nouveau document avec l'ID correct
      await setDoc(newDocRef, {
        ...data,
        userId, // Mettre √† jour l'userId
        measurementId,
        lastModified: Date.now()
      });
      
      console.log(`‚úÖ Document migr√© avec succ√®s: ${documentId} -> ${newDocId}`);
      
      // On ne supprime pas l'original par s√©curit√©
      // L'utilisateur devra le faire manuellement s'il le souhaite
      
      return true;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la correction de propri√©t√©: ${documentId}`, error);
      return false;
    }
  }

  /**
   * Affiche une alerte pour confirmer l'op√©ration de r√©paration
   */
  static showRepairConfirmation(
    title: string,
    message: string,
    onConfirm: () => void
  ): void {
    showToast(
      title,
      message,
      [
        {
          text: 'Annuler',
          style: 'cancel',
        },
        {
          text: 'Continuer',
          onPress: onConfirm,
          style: 'destructive',
        },
      ]
    );
  }
}
