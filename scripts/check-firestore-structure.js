// @ts-check

/**
 * Script pour v√©rifier et initialiser la structure Firestore sans authentification
 * Utilise les r√®gles Firestore d√©ploy√©es pour permettre l'acc√®s aux collections
 */

// Importations Firebase Admin pour acc√®s sans authentification
const admin = require('firebase-admin');
const fs = require('fs');
const path = require('path');

// Chemin vers le fichier de cl√© priv√©e pour Firebase Admin
const serviceAccountPath = path.join(__dirname, '../service-account-key.json');
const serviceAccountExamplePath = path.join(__dirname, '../service-account-key-example.json');

/**
 * Initialise Firebase Admin avec les informations du projet
 */
function initializeFirebaseAdmin() {
  try {
    // Si d√©j√† initialis√©, r√©cup√©rer l'app existante
    try {
      return admin.app();
    } catch (e) {
      // V√©rifier si le fichier de cl√© de service existe
      if (!fs.existsSync(serviceAccountPath)) {
        console.log('‚ö†Ô∏è Fichier service-account-key.json non trouv√©');
        console.log('‚ÑπÔ∏è Utilisation de l\'initialisation alternative avec GOOGLE_APPLICATION_CREDENTIALS');
        
        // V√©rifier si la variable d'environnement GOOGLE_APPLICATION_CREDENTIALS est d√©finie
        if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {
          console.log('‚úÖ Variable GOOGLE_APPLICATION_CREDENTIALS trouv√©e, utilisation automatique');
          return admin.initializeApp({
            projectId: 'glycoflex-new'
          });
        }
        
        // Sinon, initialiser sans authentification (pour les r√®gles publiques)
        console.log('‚ö†Ô∏è Initialisation sans authentification, acc√®s limit√©');
        return admin.initializeApp({
          projectId: 'glycoflex-new'
        });
      }
      
      // Initialiser avec le fichier de service
      try {
        const serviceAccount = require(serviceAccountPath);
        return admin.initializeApp({
          credential: admin.credential.cert(serviceAccount),
          projectId: 'glycoflex-new',
        });
      } catch (err) {
        console.error('‚ùå Erreur avec le fichier service-account-key.json:', err.message);
        console.log('‚ö†Ô∏è Veuillez t√©l√©charger un fichier service-account-key.json depuis Firebase Console');
        console.log('Voir: https://firebase.google.com/docs/admin/setup#initialize-sdk');
        
        // Cr√©er un exemple de fichier s'il n'existe pas
        if (fs.existsSync(serviceAccountExamplePath)) {
          console.log(`‚ÑπÔ∏è Consultez l'exemple dans: service-account-key-example.json`);
        }
        
        process.exit(1);
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de Firebase Admin:', error);
    process.exit(1);
  }
}

/**
 * V√©rifie et initialise les collections Firestore
 */
async function setupFirestoreCollections() {
  console.log('üîç V√©rification et initialisation des collections Firestore...');
  
  const app = initializeFirebaseAdmin();
  const db = admin.firestore(app);
  
  try {
    // Collections √† v√©rifier/cr√©er
    const collections = [
      'encrypted_measurements',
      'sync_metadata',
      'devices',
      'users'
    ];
    
    // V√©rifier chaque collection
    for (const collectionName of collections) {
      const collRef = db.collection(collectionName);
      const snapshot = await collRef.limit(1).get();
      
      console.log(`üìä Collection '${collectionName}': ${snapshot.empty ? 'vide' : 'contient des documents'}`);
      
      // Si c'est la collection users et qu'elle est vide, cr√©er un document utilisateur test
      if (collectionName === 'users' && snapshot.empty) {
        // Ne pas cr√©er de document test pour √©viter des probl√®mes de s√©curit√©
        console.log('‚ÑπÔ∏è La collection users est vide - aucun document cr√©√© (s√©curit√©)');
      }
    }
    
    console.log('‚úÖ V√©rification des collections termin√©e avec succ√®s');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des collections:', error);
  } finally {
    // Ne pas fermer l'app ici car cela provoque une erreur avec Firebase Admin
    // app.delete();
  }
}

/**
 * Fonction principale
 */
async function main() {
  console.log('üöÄ D√©marrage de la v√©rification de la structure Firestore...');
  
  try {
    await setupFirestoreCollections();
    console.log('‚úÖ Structure Firestore v√©rifi√©e avec succ√®s !');
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de la structure Firestore:', error);
  }
}

// Ex√©cution du script
main().catch(console.error);
